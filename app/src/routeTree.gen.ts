/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GuidesImport } from './routes/guides'
import { Route as AssetsImport } from './routes/assets'
import { Route as IndexImport } from './routes/index'
import { Route as GuidesIndexImport } from './routes/guides/index'
import { Route as AssetsIndexImport } from './routes/assets/index'
import { Route as GuidesNewImport } from './routes/guides/new'
import { Route as GuidesIdImport } from './routes/guides/$id'
import { Route as AssetsNewImport } from './routes/assets/new'
import { Route as AssetsIdImport } from './routes/assets/$id'

// Create/Update Routes

const GuidesRoute = GuidesImport.update({
  id: '/guides',
  path: '/guides',
  getParentRoute: () => rootRoute,
} as any)

const AssetsRoute = AssetsImport.update({
  id: '/assets',
  path: '/assets',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GuidesIndexRoute = GuidesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GuidesRoute,
} as any)

const AssetsIndexRoute = AssetsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AssetsRoute,
} as any)

const GuidesNewRoute = GuidesNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => GuidesRoute,
} as any)

const GuidesIdRoute = GuidesIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => GuidesRoute,
} as any)

const AssetsNewRoute = AssetsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AssetsRoute,
} as any)

const AssetsIdRoute = AssetsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AssetsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/assets': {
      id: '/assets'
      path: '/assets'
      fullPath: '/assets'
      preLoaderRoute: typeof AssetsImport
      parentRoute: typeof rootRoute
    }
    '/guides': {
      id: '/guides'
      path: '/guides'
      fullPath: '/guides'
      preLoaderRoute: typeof GuidesImport
      parentRoute: typeof rootRoute
    }
    '/assets/$id': {
      id: '/assets/$id'
      path: '/$id'
      fullPath: '/assets/$id'
      preLoaderRoute: typeof AssetsIdImport
      parentRoute: typeof AssetsImport
    }
    '/assets/new': {
      id: '/assets/new'
      path: '/new'
      fullPath: '/assets/new'
      preLoaderRoute: typeof AssetsNewImport
      parentRoute: typeof AssetsImport
    }
    '/guides/$id': {
      id: '/guides/$id'
      path: '/$id'
      fullPath: '/guides/$id'
      preLoaderRoute: typeof GuidesIdImport
      parentRoute: typeof GuidesImport
    }
    '/guides/new': {
      id: '/guides/new'
      path: '/new'
      fullPath: '/guides/new'
      preLoaderRoute: typeof GuidesNewImport
      parentRoute: typeof GuidesImport
    }
    '/assets/': {
      id: '/assets/'
      path: '/'
      fullPath: '/assets/'
      preLoaderRoute: typeof AssetsIndexImport
      parentRoute: typeof AssetsImport
    }
    '/guides/': {
      id: '/guides/'
      path: '/'
      fullPath: '/guides/'
      preLoaderRoute: typeof GuidesIndexImport
      parentRoute: typeof GuidesImport
    }
  }
}

// Create and export the route tree

interface AssetsRouteChildren {
  AssetsIdRoute: typeof AssetsIdRoute
  AssetsNewRoute: typeof AssetsNewRoute
  AssetsIndexRoute: typeof AssetsIndexRoute
}

const AssetsRouteChildren: AssetsRouteChildren = {
  AssetsIdRoute: AssetsIdRoute,
  AssetsNewRoute: AssetsNewRoute,
  AssetsIndexRoute: AssetsIndexRoute,
}

const AssetsRouteWithChildren =
  AssetsRoute._addFileChildren(AssetsRouteChildren)

interface GuidesRouteChildren {
  GuidesIdRoute: typeof GuidesIdRoute
  GuidesNewRoute: typeof GuidesNewRoute
  GuidesIndexRoute: typeof GuidesIndexRoute
}

const GuidesRouteChildren: GuidesRouteChildren = {
  GuidesIdRoute: GuidesIdRoute,
  GuidesNewRoute: GuidesNewRoute,
  GuidesIndexRoute: GuidesIndexRoute,
}

const GuidesRouteWithChildren =
  GuidesRoute._addFileChildren(GuidesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assets': typeof AssetsRouteWithChildren
  '/guides': typeof GuidesRouteWithChildren
  '/assets/$id': typeof AssetsIdRoute
  '/assets/new': typeof AssetsNewRoute
  '/guides/$id': typeof GuidesIdRoute
  '/guides/new': typeof GuidesNewRoute
  '/assets/': typeof AssetsIndexRoute
  '/guides/': typeof GuidesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assets/$id': typeof AssetsIdRoute
  '/assets/new': typeof AssetsNewRoute
  '/guides/$id': typeof GuidesIdRoute
  '/guides/new': typeof GuidesNewRoute
  '/assets': typeof AssetsIndexRoute
  '/guides': typeof GuidesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/assets': typeof AssetsRouteWithChildren
  '/guides': typeof GuidesRouteWithChildren
  '/assets/$id': typeof AssetsIdRoute
  '/assets/new': typeof AssetsNewRoute
  '/guides/$id': typeof GuidesIdRoute
  '/guides/new': typeof GuidesNewRoute
  '/assets/': typeof AssetsIndexRoute
  '/guides/': typeof GuidesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assets'
    | '/guides'
    | '/assets/$id'
    | '/assets/new'
    | '/guides/$id'
    | '/guides/new'
    | '/assets/'
    | '/guides/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assets/$id'
    | '/assets/new'
    | '/guides/$id'
    | '/guides/new'
    | '/assets'
    | '/guides'
  id:
    | '__root__'
    | '/'
    | '/assets'
    | '/guides'
    | '/assets/$id'
    | '/assets/new'
    | '/guides/$id'
    | '/guides/new'
    | '/assets/'
    | '/guides/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssetsRoute: typeof AssetsRouteWithChildren
  GuidesRoute: typeof GuidesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssetsRoute: AssetsRouteWithChildren,
  GuidesRoute: GuidesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/assets",
        "/guides"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/assets": {
      "filePath": "assets.tsx",
      "children": [
        "/assets/$id",
        "/assets/new",
        "/assets/"
      ]
    },
    "/guides": {
      "filePath": "guides.tsx",
      "children": [
        "/guides/$id",
        "/guides/new",
        "/guides/"
      ]
    },
    "/assets/$id": {
      "filePath": "assets/$id.tsx",
      "parent": "/assets"
    },
    "/assets/new": {
      "filePath": "assets/new.tsx",
      "parent": "/assets"
    },
    "/guides/$id": {
      "filePath": "guides/$id.tsx",
      "parent": "/guides"
    },
    "/guides/new": {
      "filePath": "guides/new.tsx",
      "parent": "/guides"
    },
    "/assets/": {
      "filePath": "assets/index.tsx",
      "parent": "/assets"
    },
    "/guides/": {
      "filePath": "guides/index.tsx",
      "parent": "/guides"
    }
  }
}
ROUTE_MANIFEST_END */
